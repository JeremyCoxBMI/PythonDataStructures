__author__ = 'COX1KB'

import mytimer as mt
import io
import StringIO

#rather than send out an input file in the module, we just simulate one here:
DNAfile = [
    "AAGATAGATACACGAAGGAAGCACTCGCTCGTTAGGAAAGATACACACGAGGAAGCACTCGCTCGTTAGG",
    "AAAGATAGATACACGAGGAAGCCTCCCTCGCTAGACACTAGGAAGTCATCGCTCGTTAGGAAAGACATAA",
    "CACTAGGAACATCGCTCGTTAAGGAAGGACATACACAAGAGGAAGGGCCCTCTAGACATAAAGCCTTTGC",
    "TAGGAAAGATAATAACACGAGGAAGTCATCGCTCGTTTAGGAAGGACAGCCTTTGCTAGGAAAGATATAA",
    "CTACGAGGGAAGGCCCTTTACTCGTTAGGAAGGACACGTAACACTTAAAGTTTGTTTGTTTGTTTGTTTG",
    "TTTGGCTGCGTGGGGCTTACGACTGTCGTAGTGCAGAGACCTCCCCAAACTTTCCCCCACAAAAAATTGT",
    "CACAGGTTTGAGCCCTAGCCAACACCAACCAAACAGGAGTCCGGCGCGACCCATTCCCCACTAAAAGGCG",
    "CGACCCATTCCCCACCAAAACTTCCCTCTCCCCCACCCCCGCCAGTTATCTCGACCCGCGGAACCTTTCA",
    "TCCTTCCATAACCTCTCGCTCGCACTCTCTATAGTAAAAAACGGTCTAACACTACTTCGCGTTAACCTAG",
    "CGGCTTAGAGGTTAATCGCCTACCCGTCCCGTATCTATAAAAAAGGTAGAAAAGGTAAGGTTGAGGTTGA",
    "GGAGAGGAGGAGAGAAAGGAGGAGAGAGGATGTGTAAGGTAAAGGGAAGGAGATAGGAGGGAGGGAGGGT",
    "TAGGGAGAGGGGGGAGAAGGAGAAAGGGGGGATAACTCTTGGTTTTTTATCAAAAACTAGGTCGACCGGG",
    "TCCGGGGGGGGCTTGCTCGCCGCTAACTAACAGAAGTTGAAAAATATAAAACGCGCGCGCTCGTCTTTCG",
    "TCCTTCCTTCATCTTCTTCTTCTTCGTCTTCTTACTTCTTCTTCTTATTTTTTTATATATAACTCTTTCG",
    "TCTTCCAACAATTATTTTTTTAAAAAAAATTGAAGGGGGTCGTTTTAGAAGGTACGGGGGGTTAAATTAC",
    "GACGAGGGGTTAAAGGGGGTAAGAGTAGGAGGGGAGGTGGGGTAAAATTTGGAGGGAGGAGAGGTGGGGT",
    "TGGGACGAGGATTAGTCGCGACTAGCGTTCTGACAAAAAATCTCAGACGACGGCCAAAAATATTCGTCGA",
    "GACTAGCGATCTCACTCTTTTTTTCAAAAAAAGAAAGACACAACACCTCGCAGTTCGTTATCAATTTTTA",
    "TTTTATCAATTTTATATCTCCCAGCGAGTGAATCTCGCTCTTTCTTTTCTTTTCAATTGTAAATCGGATT",
    "CTCCAGTCTAGAGATCCCTCGTACCGCATTTCCCGCGGTGTACTTCAGATACGGGCAGTTTCTATTTTCC",
    "GCCCACCTGGCGTGTTCTATCATGGCGACATCTCCCCGTTCCCACGTGCGTAGAATCTGACCGCAAAAAT",
    "GGCACGCCACCCTGTCTCCCCGTCCCGTGTAGTACAGTCCCGCTGCCGCCAACTCTTCGGGTTTCATGTG",
    "AGACTGCTTGGGCCACTCGAATCTCCCGTAAGATTCCAGCCTTCCCGCGTAGGTTCCGTTGTCCGTGGTC",
    "GAGTCTACGGCGTCCGGAACCGTCTTGCAGGCGACCGACAAAAATGCGCAGTCGTACATCAGTCCGTGTT",
    "CCTTCTTGGTTTCCCGTTGATGAATTTCCATGGGAGATTCTCCTTCTTCTCCTCCCCACTCCGAGATTTC",
    "CAGAGCGCAGCTGAAGCACTTGACCCTGTCCGACTTACCGGTGTAGTAAAAGCCCGCCTTCGCCAGTTCC",
    "TCGGAGCTAGGTTCGAAGTTCCAGTAAGGCGAGAAGGACTCTAGTCGATCCTCTTCTTTGGCGTAAGGAA",
    "GTTCGACTTCCGCGAGTTTGCGATCGGGGGAATCTTTGTCGCGGAGAACCAGGTAACCTCCCTCGTCGGG",
    "TCCCGCGCTGTGCCAGGCGTTGACCGCCGACATCGATACGGCTTGAACGTACATGGACGAGAAGACGTCG",
    "ATGCCGATGCTAGGTCGTTCTTTAGGCGTGATTCGTTGAGTCACCTCGAGAACGGATTCGACGATCGAAG",
    "TGGGTTTGTCGATCTTCATGGTTTTCTTCTTGTTGTTGTTGTTGTTGTTGTTGTTGTTGTTGTTGTTGTC",
    "GTTCGAAGTAAAAAGAGATTTCGAATGAATGTTCAAGGAGAATCGGTTGGTTTTATAGGTGTACGTGCGA",
    "GTGAGATGTAAAAGGCGAGGTAAGGTGATGTGTGAGGTAAGGAAAGGTAAAGGAAAGGTAAGGAAAACTA",
    "CGAGGGGGCAAGGCGAGATAGCGGGTGCGTTTACTACTAAGTCTAGCAACGATTCTCCCAAAGGTATAAA",
    "CGAGCAAGAATCTCTCGCACGAGATCATTCATGCCTAGACGAAGAAGCGAGAAACACCATGAAAAGAAGC",
    "CACGACCAAACCGACATGAGCAGCAGCGACAGCCGCGTCAAGATCCCTCACCTCGCGGATCACGATTACT",
    "GCTTACCTCCCGAGGAAGAACGGCAGCTAGACGTGATCTACATGGAGGATGATTGTCAAGCTCACGAGGA",
    "AGTTCACTATGATGAAAACGTGAGTGCCGAGGATCTACACTCGGAGATCGAGCGCCTGCGTGCAGAGCGA",
    "GCATTGACTTTATCCGAGAACGAAACTCTGCGCGCGGAACTTGAACGCCTACGAGCGGACAACGAAAAGA",
    "AACTAAACGATGAGACTGCCGCACTACCGGAGCTTGAAGACAAGAAGAACGGGTTCGCCAATTCTTTCAT",
    "CGCCAACATTCACTCCGAGCTCGGTTTGGAGATGATGAACACTCCGGCCGGTAAAGTTTACAAGGAGATG",
    "TGTCTGGCGGTTCACGACGAGAATGTGATTGCGGAGGATGAAGGACGGGAGCCCAGGAGTGTTATGATAC",
    "CGCTGACCGTCGACGTGATGAAGGAGTTGGAGTTTGATTTCAAAGATAACAAGGCGACTAATCAACAACG",
    "TGACCGGAAGTTGAAAAATATACAATGTGATGACGTCATGAAATATCAACCAATGAAAAATGGCAGCAAA",
    "GACGCTGCCAATTCTACTATAGAGAAATTTATTCAAACTAATAATATTTTCTCTATGAGGGAAATGATTC",
    "ATGATAAAAACACAAACAATATACCTTTACTGACCATCGATCAATTTATGCGATACATCATCACCGGTAT",
    "AACCCAGCAGAACCACGACATAAGAAAGGATGTGAGTAGGATCATGGCCAAGATCCACACCGCCTCTGAT",
    "CGTCAGCAGTACAAGGTCTTCAAAAACCTCTACTCTGACTGGCTGCGTCAAGAAGAACAAATCAAGACCC",
    "TGTCACTCGCCAACGCTCTTCTAGAGAAGGAGAAGGAGAACGAGCGTCTACGTGCCGACAACCAAACCTT",
    "ACGAGCAGACGCTCAAGAAAAGCGTGCCGTCAAAGCGGAGTTCAACGAAGTCATGTTTCACTCGCCCACC",
    "GACCGAAGAGTCTACGTAAACAAGGTCTTCCCCAACAGAAACAAGAAGGTCGGGGCAAACCTGATCGTCA",
    "GATCCCTGATGACGCCGCGAGACAACGAGAAGGAGATGAACAAGCTAGTAGGTCCCAAGAAGTGGAGCCC",
    "TCTGTTTTGTTCTCAACCCCTTCCGGAGGCAACGTCAGTCCGCGATGTCTTAGTCAAAAAAGGTTTGCAG",
    "AACGACAAACTCGTCGGAATCAACAGAGCGATCGCGTACAACGCTTGGACTGGCGAGCAGAAACGATGGA",
    "TGAGCGAGATGAAACAACCTCAACATCAACTACCCGGAGGTAAAAGTTGCGGGGAGAACTGGTTTCGTTA",
    "CCATCCCGTAGACACGCACGACGTAGAGAAGATCAAGAAATCCTTCTCCCACTACGCCCGACAAGAGTGC"
    ]

class superstring:
    def __init__(self):
        self.strings =[]

    # def __init__(self, mystring):
    #     self.strings =[mystring]

    def add(self,mystring):
        self.strings.append(mystring)

    def toString2(self):
        return "".join(self.strings)

    def toString(self):
        #output = io.StringIO()
        output = StringIO.StringIO()
        for x in self.strings:
            output.write(x)
        contents = output.getvalue()
        output.close()
        return contents

# which method has more dynamic resizes?
# which method is faster? slower? why?
# you would get a different answer in C++ or Java.  Why?
# How did Jeremy get in trouble expecting Java to act like Python?

if __name__ == "__main__":

    timer = mt.mytimer()

    print "\nBuilding By Concatenation"
    timer.start()
    result = ""
    for x in DNAfile:
        result += x
    print "Concatenation took "+timer.elapsed()


    print "\nBuilding By Superstring StringIO"
    timer.start()
    result = superstring()
    for x in DNAfile:
        result.add(x)
    result = result.toString()
    print "Superstring StringIO() took "+timer.elapsed()

    print "\nBuilding By Superstring join()"
    timer.start()
    result = superstring()
    for x in DNAfile:
        result.add(x)
    result = result.toString2()
    print "Superstring join() took "+timer.elapsed()

    print "\nBuilding Superstring only, no toString"
    timer.start()
    result = superstring()
    for x in DNAfile:
        result.add(x)
    print "Superstring only took "+timer.elapsed()